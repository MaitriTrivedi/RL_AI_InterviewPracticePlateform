[
    {
        "id": "ds_001",
        "question": "Implement a function to reverse a linked list iteratively and recursively.",
        "topic": "data_structures",
        "difficulty": 3,
        "expected_time_minutes": 15,
        "historical_performance": {
            "attempts": 1200,
            "avg_score": 0.75,
            "avg_time_minutes": 12.5
        },
        "sample_solution": "def reverse_iterative(head):\n    prev = None\n    current = head\n    while current:\n        next_temp = current.next\n        current.next = prev\n        prev = current\n        current = next_temp\n    return prev",
        "tags": ["linked_list", "iteration", "recursion"]
    },
    {
        "id": "algo_001",
        "question": "Given an array of integers nums and an integer target, return indices of the two numbers that add up to target.",
        "topic": "algorithms",
        "difficulty": 2,
        "expected_time_minutes": 10,
        "historical_performance": {
            "attempts": 2500,
            "avg_score": 0.85,
            "avg_time_minutes": 8.3
        },
        "sample_solution": "def two_sum(nums, target):\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []",
        "tags": ["array", "hash_table", "two_pointer"]
    },
    {
        "id": "sys_001",
        "question": "Design a distributed key-value store that can handle millions of requests per second.",
        "topic": "system_design",
        "difficulty": 8,
        "expected_time_minutes": 45,
        "historical_performance": {
            "attempts": 800,
            "avg_score": 0.62,
            "avg_time_minutes": 40.2
        },
        "sample_solution": "Key components:\n1. Load Balancer\n2. Cache Layer (Redis)\n3. Storage Layer (Distributed Hash Table)\n4. Replication & Sharding\n5. Consistency Protocol",
        "tags": ["distributed_systems", "scalability", "consistency"]
    },
    {
        "id": "ds_array_01",
        "topic": "Data Structures",
        "difficulty": 1,
        "content": "What is the difference between an array and a linked list? Give an example of when you would choose one over the other."
    },
    {
        "id": "ds_array_02",
        "topic": "Data Structures",
        "difficulty": 2,
        "content": "How would you reverse an array in-place? Write a brief algorithm for it."
    },
    {
        "id": "algo_sort_01",
        "topic": "Algorithms",
        "difficulty": 2,
        "content": "Explain how QuickSort works. What is its average and worst-case time complexity?"
    },
    {
        "id": "ds_tree_01",
        "topic": "Data Structures",
        "difficulty": 3,
        "content": "What is a Binary Search Tree? Write the algorithm for inserting a new node into a BST."
    },
    {
        "id": "algo_search_01",
        "topic": "Algorithms",
        "difficulty": 2,
        "content": "Implement binary search. When would you use it over linear search?"
    },
    {
        "id": "ds_stack_01",
        "topic": "Data Structures",
        "difficulty": 1,
        "content": "What is a stack? Give three real-world applications where you would use a stack."
    },
    {
        "id": "ds_queue_01",
        "topic": "Data Structures",
        "difficulty": 1,
        "content": "Explain the difference between a queue and a stack. When would you use each one?"
    },
    {
        "id": "algo_dp_01",
        "topic": "Algorithms",
        "difficulty": 4,
        "content": "What is dynamic programming? Explain with the example of the fibonacci sequence."
    },
    {
        "id": "python_basics_01",
        "topic": "Python",
        "difficulty": 1,
        "content": "What are list comprehensions in Python? Give an example of when you would use them."
    },
    {
        "id": "python_oop_01",
        "topic": "Python",
        "difficulty": 2,
        "content": "Explain the concept of inheritance in Python with a simple example."
    }
] 